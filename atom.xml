<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zoly&#39;s blog</title>
  
  
  <link href="https://zo-ly.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://zo-ly.github.io/blog/"/>
  <updated>2025-10-30T08:35:00.837Z</updated>
  <id>https://zo-ly.github.io/blog/</id>
  
  <author>
    <name>Zoly</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>oh-my-zsh 配置</title>
    <link href="https://zo-ly.github.io/blog/2022/02/10/oh-my-zsh/"/>
    <id>https://zo-ly.github.io/blog/2022/02/10/oh-my-zsh/</id>
    <published>2022-02-10T10:16:48.000Z</published>
    <updated>2025-10-30T08:35:00.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mackup"><a href="#Mackup" class="headerlink" title="Mackup"></a>Mackup</h2><p>找到了一个好工具 <a href="https://github.com/lra/mackup">Mackup</a> 🚀，可以用来同步自己各种应用的配置，所以 <code>dotFiles</code> 都可以同步到 <a href="https://github.com/zo-ly/mackup_cfg">Github 仓库</a> 啦 🎉</p><span id="more"></span><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a><del>oh-my-zsh</del></h2><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a><del>插件</del></h2><ul><li><p><del>zsh-autojump</del></p></li><li><p><del>zsh-syntax-highlighting</del></p></li><li><p><del>zsh-autosuggestions</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindkey &#x27;^I&#x27; autosuggest-accept</span><br></pre></td></tr></table></figure></li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a><del>Git</del></h2><h3 id="diff-so-fancy"><a href="#diff-so-fancy" class="headerlink" title="diff-so-fancy"></a><del>diff-so-fancy</del></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">alias</span>]</span><br><span class="line">  <span class="string">co</span> <span class="string">=</span> <span class="string">checkout</span></span><br><span class="line">  <span class="string">s</span> <span class="string">=</span> <span class="string">status</span></span><br><span class="line">[<span class="string">pull</span>]</span><br><span class="line">  <span class="string">ff</span> <span class="string">=</span> <span class="string">only</span></span><br><span class="line">[<span class="string">core</span>]</span><br><span class="line">  <span class="string">editor</span> <span class="string">=</span> <span class="string">nvim</span></span><br><span class="line">  <span class="string">pager</span> <span class="string">=</span> <span class="string">diff-so-fancy</span> <span class="string">|</span> <span class="string">less</span> <span class="string">--tabs=4</span> <span class="string">-RFX</span></span><br><span class="line">[<span class="string">interactive</span>]</span><br><span class="line">  <span class="string">diffFilter</span> <span class="string">=</span> <span class="string">diff-so-fancy</span> <span class="string">--patch</span></span><br><span class="line">[<span class="string">color</span>]</span><br><span class="line">  <span class="string">ui</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">[<span class="string">color</span> <span class="string">&quot;diff-highlight&quot;</span>]</span><br><span class="line">  <span class="string">oldNormal</span> <span class="string">=</span> <span class="string">red</span> <span class="string">bold</span></span><br><span class="line">  <span class="string">oldHighlight</span> <span class="string">=</span> <span class="string">red</span> <span class="string">bold</span> <span class="number">52</span></span><br><span class="line">  <span class="string">newNormal</span> <span class="string">=</span> <span class="string">green</span> <span class="string">bold</span></span><br><span class="line">  <span class="string">newHighlight</span> <span class="string">=</span> <span class="string">green</span> <span class="string">bold</span> <span class="number">22</span></span><br><span class="line">[<span class="string">color</span> <span class="string">&quot;diff&quot;</span>]</span><br><span class="line">  <span class="string">meta</span> <span class="string">=</span> <span class="number">11</span></span><br><span class="line">  <span class="string">frag</span> <span class="string">=</span> <span class="string">magenta</span> <span class="string">bold</span></span><br><span class="line">  <span class="string">func</span> <span class="string">=</span> <span class="number">146</span> <span class="string">bold</span></span><br><span class="line">  <span class="string">commit</span> <span class="string">=</span> <span class="string">yellow</span> <span class="string">bold</span></span><br><span class="line">  <span class="string">old</span> <span class="string">=</span> <span class="string">red</span> <span class="string">bold</span></span><br><span class="line">  <span class="string">new</span> <span class="string">=</span> <span class="string">green</span> <span class="string">bold</span></span><br><span class="line">  <span class="string">whitespace</span> <span class="string">=</span> <span class="string">red</span> <span class="string">reverse</span></span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a><del>主题</del></h2><h3 id="Spaceship"><a href="#Spaceship" class="headerlink" title="Spaceship"></a><del><a href="https://spaceship-prompt.sh/getting-started/">Spaceship</a></del></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;spaceship&quot;</span><br><span class="line">SPACESHIP_PACKAGE_SHOW=false</span><br><span class="line">SPACESHIP_DOCKER_SHOW=false</span><br><span class="line">SPACESHIP_NODE_SHOW=false</span><br><span class="line">SPACESHIP_RUBY_SHOW=false</span><br><span class="line">SPACESHIP_DIR_TRUNC_PREFIX=…/</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">oh-my-zsh 配置 自用</summary>
    
    
    
    <category term="记录" scheme="https://zo-ly.github.io/blog/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="zsh" scheme="https://zo-ly.github.io/blog/tags/zsh/"/>
    
    <category term="oh-my-zsh" scheme="https://zo-ly.github.io/blog/tags/oh-my-zsh/"/>
    
  </entry>
  
  <entry>
    <title>vim tutor</title>
    <link href="https://zo-ly.github.io/blog/2022/02/09/vimtutor/"/>
    <id>https://zo-ly.github.io/blog/2022/02/09/vimtutor/</id>
    <published>2022-02-09T16:31:48.000Z</published>
    <updated>2025-10-30T08:35:00.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一讲小结"><a href="#第一讲小结" class="headerlink" title="第一讲小结"></a>第一讲小结</h2><ol><li><p>光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。 <strong>h (左移)</strong> <strong>j (下行)</strong> <strong>k (上行)</strong> <strong>l (右移)</strong></p></li><li><p>欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt;</p></li><li><p>欲退出 Vim 编辑器，请输入 <strong>:q!</strong> 放弃所有改动。或者输入 <strong>:wq</strong> 保存改动。</p></li><li><p>在正常模式下删除光标所在位置的字符，请按： <strong>x</strong></p></li><li><p>欲插入或添加文本，请输入：</p><p><strong>i</strong> 在光标前插入文本</p><p><strong>a</strong> 在光标后插入文本</p><p><strong>A</strong> 在一行后添加文本</p></li></ol><span id="more"></span><h2 id="第二讲小结"><a href="#第二讲小结" class="headerlink" title="第二讲小结"></a>第二讲小结</h2><ol><li><p>欲从当前光标删除至下一个单词，请输入：<strong>dw</strong></p></li><li><p>欲从当前光标删除至当前行末尾，请输入：<strong>d$</strong></p></li><li><p>欲删除整行，请输入：<strong>dd</strong></p></li><li><p>欲重复一个动作，请在它前面加上一个数字：2w</p></li><li><p>在正常模式下修改命令的格式是：</p><blockquote><p><strong>operator [number] motion</strong></p></blockquote><ul><li><strong>operator</strong>  操作符，代表要做的事情，比如 d 代表删除，c 代表更改</li><li><strong>number</strong>  可以附加的数字，代表动作重复的次数</li><li><strong>motion</strong>  动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，$ 代表行末等等</li></ul></li><li><p>欲移动光标到行首，请按数字0键：<strong>0</strong></p></li><li><p>欲撤消以前的操作，请输入：<strong>u (小写的u)</strong></p><p>欲撤消在一行中所做的改动，请输入：<strong>U (大写的U)</strong></p><p>欲撤消以前的撤消命令，恢复以前的操作结果，请输入：<strong>CTRL-R</strong></p></li></ol><h2 id="第三讲小结"><a href="#第三讲小结" class="headerlink" title="第三讲小结"></a>第三讲小结</h2><ol><li><strong>p</strong> 将最后一次删除的内容置入光标后面</li><li><strong>r</strong> key 替换光标所在位置的字符</li><li><strong>ce</strong> 删除一个单词并进入插入模式</li><li><strong>c</strong> <strong>[number]</strong> <strong>motion</strong><ul><li><strong>c</strong> 操作符‘change’，更改的意思</li></ul></li></ol><h2 id="第四讲小结"><a href="#第四讲小结" class="headerlink" title="第四讲小结"></a>第四讲小结</h2><ol><li><strong>CTRL + g</strong> 显示当前编辑文件状态信息，光标位置、行号等</li><li><strong>G</strong> 跳转到文件最后一行</li><li><strong>gg</strong> 跳转到文件最后一样</li><li><strong>行号 + G</strong> 跳转到该行</li><li><strong>&#x2F;</strong>  或者  <strong>?</strong> 进行搜索，区别是 <strong>?</strong> 进行逆向搜索，<strong>n</strong>(<strong>N</strong>)向下（上）查找，<strong>CTRL + o</strong> 或者 <strong>CTRL + i</strong> 回到搜索前的位置</li><li><strong>%</strong> 可以搜索括号( ) [ ] { }，在程序调试时查找不匹配的括号很有用</li></ol><h2 id="第五讲小结"><a href="#第五讲小结" class="headerlink" title="第五讲小结"></a>第五讲小结</h2><ol><li><strong>:!</strong> 可以执行外部的 shell 命令，如：ls</li><li><strong>:w FILENAME</strong> 创建保存文件</li><li><strong>v</strong> 进入可视模式进行选取</li><li><strong>:r FILENAME</strong> 读取文件内容，并从光标位置处置入</li></ol><h2 id="第六讲小结"><a href="#第六讲小结" class="headerlink" title="第六讲小结"></a>第六讲小结</h2><ol><li><p><strong>o</strong>(<strong>O</strong>) 在光标下方（上方）新开一行并进入插入模式</p></li><li><p><strong>a</strong> 在光标后插入文本</p></li><li><p><strong>R</strong> 可连续替换多个字符</p></li><li><p><strong>v</strong> 可视模式选取 <strong>y</strong> 复制 <strong>p</strong> 粘贴</p></li><li><p><strong>:set ic</strong> 设置搜索是忽略大小写(<strong>noic</strong>)</p><p><strong>:set hls</strong> 设置搜索时高亮(<strong>nohlsearch</strong>)</p><p><strong>:set is</strong> 设置键入是就搜索(<strong>nois</strong>)</p></li></ol><h2 id="第七讲小结"><a href="#第七讲小结" class="headerlink" title="第七讲小结"></a>第七讲小结</h2><ol><li><strong>:help</strong> 打开帮助窗口</li><li>创建一个 .vimrc 保存偏好设置</li><li>插入模式下<strong>CTRL + d</strong> 或 &#x2F;TAB&#x2F; 可以进行命令自动补全</li></ol><p>一些基本的 vim 配置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; --- ~/.vimrc ---</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"><span class="keyword">set</span> ignorecase smartcase</span><br><span class="line"><span class="keyword">set</span> smartindent</span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">2</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> ,<span class="keyword">p</span> <span class="comment">&quot;0p</span></span><br><span class="line"><span class="keyword">nnoremap</span> ,<span class="keyword">P</span> <span class="comment">&quot;0P</span></span><br><span class="line"><span class="keyword">nnoremap</span> J gT</span><br><span class="line"><span class="keyword">nnoremap</span> K gt</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p><strong>H</strong> 窗口头部 <strong>M</strong> 窗口中部 <strong>L</strong> 窗口尾部</p></li><li><p><strong>J</strong> 将当前行与下一行链接在一起 <strong>K</strong> 查询光标下单词的手册页解释</p></li><li><p><strong>w</strong> 下一个单词的开头 <strong>e</strong> 下一个单词的结尾 <strong>b</strong> 上一个单词的开头</p></li><li><p>可视模式 <code>o</code> 指令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v         逐字符可视模式</span><br><span class="line">V         逐行可视模式</span><br><span class="line">Ctrl-v    逐块可视模式</span><br></pre></td></tr></table></figure></li><li><p><strong>Text Objects</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">w     一个单词</span><br><span class="line">p     一个段落</span><br><span class="line">s     一个句子</span><br><span class="line">(或)  一对()</span><br><span class="line">&#123;或&#125;  一对&#123;&#125;</span><br><span class="line">[或]  一对[]</span><br><span class="line">&lt;或&gt;  一对&lt;&gt;</span><br><span class="line">t     XML标签</span><br><span class="line">&quot;     一对&quot;&quot;</span><br><span class="line">&#x27;     一对&#x27;&#x27;</span><br><span class="line">`     一对``</span><br></pre></td></tr></table></figure></li><li><p>也可以使用 NeoVim</p><p>一些常用的 NeoVim 配置</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; --- ~/.config/nvim/init.vim ---</span></span><br><span class="line"><span class="comment">&quot; Vim-Plug</span></span><br><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line"><span class="comment">&quot; Editor theme</span></span><br><span class="line">Plug <span class="string">&#x27;folke/tokyonight.nvim&#x27;</span>, &#123; <span class="string">&#x27;branch&#x27;</span>: <span class="string">&#x27;main&#x27;</span> &#125;</span><br><span class="line"><span class="comment">&quot; Highlight difference modes</span></span><br><span class="line">Plug <span class="string">&#x27;itchyny/lightline.vim&#x27;</span></span><br><span class="line"><span class="comment">&quot; Go to definition</span></span><br><span class="line">Plug <span class="string">&#x27;neoclide/coc.nvim&#x27;</span>, &#123;<span class="string">&#x27;branch&#x27;</span>: <span class="string">&#x27;release&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Vim Script</span></span><br><span class="line"><span class="keyword">colorscheme</span> tokyonight</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; COC key map</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> gd <span class="symbol">&lt;Plug&gt;</span>(coc-definition)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> gD <span class="symbol">&lt;Plug&gt;</span>(coc-implementation)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="keyword">gr</span> <span class="symbol">&lt;Plug&gt;</span>(coc-references)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Use config from .vimrc</span></span><br><span class="line"><span class="keyword">set</span> runtimepath^=~/.<span class="keyword">vim</span> runtimepath+=~/.<span class="keyword">vim</span>/after</span><br><span class="line"><span class="keyword">let</span> &amp;packpath = &amp;runtimepath</span><br><span class="line"><span class="keyword">source</span> ~/.vimrc</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">vim 小结 熟能生巧吧</summary>
    
    
    
    <category term="学习笔记" scheme="https://zo-ly.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="vim" scheme="https://zo-ly.github.io/blog/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Babel 浅入浅出</title>
    <link href="https://zo-ly.github.io/blog/2021/04/07/learn-babel/"/>
    <id>https://zo-ly.github.io/blog/2021/04/07/learn-babel/</id>
    <published>2021-04-07T14:43:48.000Z</published>
    <updated>2025-10-30T08:35:00.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Babel-的安装"><a href="#Babel-的安装" class="headerlink" title="Babel 的安装"></a>Babel 的安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/core @babel/cli @babel/preset-env</span><br></pre></td></tr></table></figure><h2 id="Babel-可以做什么"><a href="#Babel-可以做什么" class="headerlink" title="Babel 可以做什么"></a>Babel 可以做什么</h2><ul><li>Babel 就是一个 js 代码转换器，将新的es语法转换为 es5 或者 es3 的代码，从而是最终的运行环境（浏览器&#x2F;node环境等）可以执行代码</li><li>Babel 借助 core-js 可以给 js 代码添加 polyfill，以便最终在浏览器运行的代码能够正常使用那些 api；Babel 始终能提供对最新 es 提案的支持</li><li>借助 Babel 可以将一些框架编写的格式转换标准的 es 代码，如 <code>jsx</code> <code>.vue</code> 文件</li><li>js本身是弱类型语言，如果产品用户量很大，一些小错误也会导致严重的 bug，所以就有了 <code>flow</code> <code>typescript</code> 两种强类型的编程方式，借助强类型的语言静态分析能力，可以规避不少问题，Babel 也能将其转换为标准的 es 代码</li><li>在 node 环境中，Babel 提供了<code>babel-register</code>，实现 ES6 的文件被 node 加载时自动转换为 ES5 的代码</li></ul><span id="more"></span><blockquote><p>有些大厂团队，利用Babel在做源码方面的处理(codemods)，因为大厂人多，每个人开发习惯都有差异，为了规范代码风格，提高代码质量，借助Babel，将每个人的源码做一定的标准化转换处理，能够提升团队整体的开发质量</p><p>node 运行环境，目前对 es6 的 modules 支持不是很好，Babel 提供了另外解决方案，可以把 es6 编写的 modules 在被require 的时候，自动进行代码转换，虽然没法评定这个方案的优劣，但是也能感受到 Babel 为了让开发人员能够使用最新ES语法这方面确实很努力</p></blockquote><h2 id="Babel-的使用"><a href="#Babel-的使用" class="headerlink" title="Babel 的使用"></a>Babel 的使用</h2><h3 id="不对-Babel-不做任何配置，一段-ES6-的代码经过-Babel-处理，还是原来那段代码"><a href="#不对-Babel-不做任何配置，一段-ES6-的代码经过-Babel-处理，还是原来那段代码" class="headerlink" title="不对 Babel 不做任何配置，一段 ES6 的代码经过 Babel 处理，还是原来那段代码"></a>不对 Babel 不做任何配置，一段 ES6 的代码经过 Babel 处理，还是原来那段代码</h3><h3 id="Babel-的功能都是通过-plugin-来完成的"><a href="#Babel-的功能都是通过-plugin-来完成的" class="headerlink" title="Babel 的功能都是通过 plugin 来完成的"></a>Babel 的功能都是通过 plugin 来完成的</h3><hr><p>开发中最常见的方式，与 webpack、gulp 等构建工具结合起来使用，<code>babel-loader</code>等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [</span><br><span class="line">            [<span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123; <span class="attr">targets</span>: <span class="string">&quot;defaults&quot;</span> &#125;]</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">plugins</span>: [<span class="string">&#x27;@babel/plugin-proposal-class-properties&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>最底层的直接利用 api 调用 Babel</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;@babel/core&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./main.js&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line">babel.<span class="title function_">transform</span>(source, &#123;</span><br><span class="line">    <span class="attr">configFile</span>: <span class="string">&#x27;../babel.config.js&#x27;</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; code, ast &#125; = result;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(code);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ast);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p>配合 config 文件进行设置使用，如：<code>babel.config.js</code> <code>.babelrc.js</code> <code>babel.config.json</code> <code>.babelrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;@babel/env&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;ios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;useBuiltIns&quot;</span><span class="punctuation">:</span> <span class="string">&quot;usage&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;corejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.6.5&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>也可以在 <code>package.json</code> 中配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-package&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;babel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> ... <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> ... <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><p>Babel 提供了命令行工具<code>babel-cli</code>，可以直接通过命令行对文件或文件夹进行转换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx babel script.js --out-file script-compiled.js --source-maps</span><br></pre></td></tr></table></figure><h2 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h2><p>从 Babel 7.4.0 开始已经废弃了 <code>@babel/polyfill</code></p><p>Babel 对代码的 polyfill，是利用另外两个库来做的：<code>core-js</code> (to polyfill ECMAScript features)和regenerator-runtime</p><p>core-js 目前升级到了3.x版本，跟2.x区别很大；regenerator-runtime 没有什么变化</p><p>当 core-js 升级的时候，preset-env 也会升级，所以能调整要注入的 polyfill。 这一层都是 babel 在做的，开发者无需关心</p><p><code>core-js@3</code>现在是一个完全模块化的标准库，每个 polyfill 都是一个单独的文件，所以除了全部引入，还可以考虑单独引入，这样能够减少浏览器等运行环境已经实现了的特性的 polyfill</p><blockquote><p><a href="https://github.com/zloirock/core-js">core-js</a> 还是值得学习的，将来很有可能会直接使用这个库里面的东西，所以需要掌握它是如何组织ES的各个模块实现的</p></blockquote><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p><code>plugin</code>是指导 Babel 如何执行代码转换的小型 JavaScript 程序，如：<code>transform-typeof-symbol</code>，<code>plugin-transform-arrow-functions</code></p><p>分为三类：</p><ul><li>syntax 语法类</li><li>transform 转换类</li><li>proposal 也是转换类，指代那些对 ES Proposal 进行转换的 plugin （如：<code>lastItem</code>）</li></ul><p>syntax plugin 会被 transform plugin 依赖，用于语法解析</p><h2 id="Presets"><a href="#Presets" class="headerlink" title="Presets"></a>Presets</h2><p>为了避免一个一个地添加<code>plugin</code>，Babel提供了<code>presets</code>，是一个预先确定的插件集，<code>@babel/preset-env</code> 就是 Babel 官方定义的<code>presets</code></p><p>可以创建自己的 <code>presets</code> 来定义你需要的插件组合</p><p>看一些例子：</p><ul><li><code>@babel/preset-env</code> <a href="https://github.com/babel/babel/tree/main/packages/babel-preset-env">link</a></li><li><code>babel-preset-gatsby</code> <a href="https://github.com/gatsbyjs/gatsby/tree/master/packages/babel-preset-gatsby">link</a></li></ul><h2 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="@babel&#x2F;runtime"></a>@babel&#x2F;runtime</h2><ol><li>它跟 preset-env 提供的 polyfill 适用的场景是完全不同，runtime 适合开发库，preset-env 适合开发 application</li><li>runtime 与 preset-env 的 <strong>polyfill</strong> 不能同时启用</li><li>runtime 的 polyfill 不判断目标运行环境</li></ol><p>因为 Babel 在转换过程中，会利用很多Babel自己的工具函数：helpers。在不经过优化的时候，每个文件都会单独包含这些helpers 代码，如果文件很多，就会导致大量的重复代码，所以 Babel 专门推出了<code>transform-runtime</code>来对这些 helpers 进行自动提取和其它优化</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Babel 一系列的包都以<code>@babel</code>开头，是 npm 包的一种形式，@符号开始的包，如<code>@babel/preset-env</code>，代表的是一类有 scope 限定的 npm 包，作用是只有 scope 的主体公司、机构和个人，才能往这个 scope 里面添加新的包；所以以 @ 开头的包具有权威性，一定是官方推出或者认可的包</p><p>Browserslist 和 Babel 的结合，与 eslint&#x2F;stylelint 的结合</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://babeljs.io/docs/en/">Babel Docs</a></li><li>[2] <a href="https://blog.liuyunzhuge.com/categories/Javascript/babel/">大佬的 Blog</a></li></ul>]]></content>
    
    
    <summary type="html">过了一下文档，做了一点总结</summary>
    
    
    
    <category term="学习笔记" scheme="https://zo-ly.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="babel" scheme="https://zo-ly.github.io/blog/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>CSS in Depth</title>
    <link href="https://zo-ly.github.io/blog/2021/04/07/css-in-depth/"/>
    <id>https://zo-ly.github.io/blog/2021/04/07/css-in-depth/</id>
    <published>2021-04-07T02:33:48.000Z</published>
    <updated>2025-10-30T08:35:00.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相对单位"><a href="#相对单位" class="headerlink" title="相对单位"></a>相对单位</h2><p>像素(px)是绝对单位，即 5px 放哪都一样大<br>不常用的绝对单位是mm（毫米）、cm（厘米）、in（英寸）、pt（点，印刷术语，1&#x2F;72英寸）、pc（派卡，印刷术语，12点）<br>这些单位都可以通过公式互相换算：1in &#x3D; 25.4mm &#x3D; 2.54cm &#x3D; 6pc &#x3D; 72pt &#x3D; 96px</p><p>CSS单位会根据浏览器、操作系统或者硬件适当缩放<br>像素是一个具有误导性的名称，CSS像素并不严格等于显示器的像素</p><p>em 和 rem 是相对单位，它们会根据作用到的元素而变化</p><p>当智能手机出现后，开发人员再也无法假装每个用户访问网站的体验都能一样(lll￢ω￢)</p><p>建议用rem设置字号，但是有选择地用em实现网页组件的简单缩放</p><p>结合伪类 <code>:root</code> 以及 rem &#x2F; vw，不用媒体查询也能让整个网页响应式缩放</p><span id="more"></span><h2 id="理解浮动"><a href="#理解浮动" class="headerlink" title="理解浮动"></a>理解浮动</h2><p>flexbox的行为很直观，可预测性更好，浮动的学习显得有些没有必要，除非在开发中需要兼容IE系浏览器(IE10 支持部分lexbox属性)或者维护旧代码库。</p><p>让文字围绕图片的效果，浮动仍然是唯一的办法，这恰恰也是浮动的设计初衷。</p><h2 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h2><p>Flexible Box Layout</p><p>一行多列的布局情况下，考虑到内容加载，浏览器会重新计算每个弹性子元素的大小，用户会短暂的看到不符合预期的布局，所以整页布局一行多列的时候不推荐使用flexbox</p><p>flexbox比border-radius属性的支持范围更广（大雾</p><p>如果是行内元素，那么它给父元素贡献的高度会根据line-height计算，而不是根据padding和内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* 推荐使用简写属性 flex，flex简写会给其他子属性提供默认值</span></span><br><span class="line"><span class="comment">flex-grow: 1;</span></span><br><span class="line"><span class="comment">flex-shrink: 1;</span></span><br><span class="line"><span class="comment">flex-basis: 0%;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>flex-basis 的初始值是auto，如果设置了width值，则使用该值做为flex-basis，否则用元素内容自身的大小；如果flex-basis不是auto，则width属性会被忽略</p><p>flex-grow 是将容器多出来的留白分配给子元素的属性，值为非负整数，为 0 则弹性子元素的宽度不会超过flex-basis的值，非 0 则按照设置的值的比例进行分配</p><p>flex-shrink 是处理溢出宽度的属性，值为非负整数，为 0 则表示不收缩，非 0 则表示按照设置得值的比例收缩，值越大收缩得越多</p><p><a href="https://github.com/philipwalton/flexbugs">Flexbugs</a> 该项目维护了所有已知的flexbox的浏览器兼容性问题，并在大部分情况下给出了解决方案</p><h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><p>给视口添加 <a href="https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag">meta标签</a><br>meta 标签的 content 属性里包含两个选项 1. 它告诉浏览器当解析CSS时将设备的宽度作为假定宽度，而不是一个全屏的桌面浏览器的宽度 2. 当页面加载时，它使用initial-scale将缩放比设置为100%。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>优先实现移动端设计<br>使用媒体查询，按照视口从小到大的顺序渐进增强网页<br>使用<strong>流式布局</strong>（容器随视口宽度而变化）适应任意浏览器尺寸<br>使用<a href="https://jakearchibald.com/2015/anatomy-of-responsive-images/">响应式图片</a>适应移动设备的带宽限制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- 设置src属性兼容不支持srcset属性的浏览器 --></span></span><br><span class="line"><span class="comment"><!-- srcset根据浏览器宽度的不同加载不同图片 --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">&quot;img&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;bg.jpg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">srcset</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">    bg-s.jpg 560w,</span></span></span><br><span class="line"><span class="string"><span class="tag">    bg-m.jpg 800w,</span></span></span><br><span class="line"><span class="string"><span class="tag">    bg-l.jpg 1280w</span></span></span><br><span class="line"><span class="string"><span class="tag">  &quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模块化CSS"><a href="#模块化CSS" class="headerlink" title="模块化CSS"></a>模块化CSS</h2><p>每个模块都需要有一个独一无二的类名，如<code>message</code>，以该类名开头创建的新类名称为修饰符，如<code>message-error</code></p><p>使用统一的命名约定，比如双连字符和双下划线，以便一眼就可以看清楚模块的结构</p><p>模块的命名应该有意义，同时也要避免使用简单地描述视觉效果的名称，可以从功能&#x2F;使用场景等方面思考命名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="selector-class">.red-box</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="selector-class">.alert</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>单一职责原则</strong>，模块封装的一个重要原则，每个模块应该只做一件事情</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 结合Sass等预处理器，可以用多个文件来组织样式 */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;base&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;message&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;button&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>工具类</strong>用来对元素做一件简单明确的事，比如让文字居中、让元素左浮动，或者清除浮动，工具类是唯一应该使用<code>important</code>注释的地方</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">略读了一些章节</summary>
    
    
    
    <category term="学习笔记" scheme="https://zo-ly.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CSS" scheme="https://zo-ly.github.io/blog/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>图解 HTTP</title>
    <link href="https://zo-ly.github.io/blog/2021/03/17/http-basics/"/>
    <id>https://zo-ly.github.io/blog/2021/03/17/http-basics/</id>
    <published>2021-03-17T15:37:48.000Z</published>
    <updated>2025-10-30T08:35:00.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><ul><li>三次握手，关键词：高效、可靠</li><li>tcp&#x2F;ip协议分层，链路层&#x2F;网络层(ip)&#x2F;传输层(tcp)&#x2F;应用层</li><li>ip 是一种协议，和ip地址做区分</li></ul><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><ul><li>持久连接：只要任意一端没有提出断开连接，就会一直保持TCP连接状态</li><li>Cookie技术通过在request和response的报文中写入信息来控制客户端的状态</li></ul><span id="more"></span><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p><strong>内容编码</strong> 指明应用在实体内容上的编码格式，并保持实体信息原样的压缩。常用的内容编码有以下几种：</p><ul><li>gzip（GUN zip）</li><li>compress（UNIX 系统的标准压缩）</li><li>deflate（zlib）</li><li>identity（不进行编码）</li></ul><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><table><thead><tr><th align="center">code</th><th align="center">类别</th><th align="center">原因短语</th></tr></thead><tbody><tr><td align="center">1XX</td><td align="center">Informational</td><td align="center">接受的请求正在处理</td></tr><tr><td align="center">2XX</td><td align="center">Success</td><td align="center">请求正常处理完毕</td></tr><tr><td align="center">3XX</td><td align="center">Redirection</td><td align="center">需要进行附加操作以完成请求</td></tr><tr><td align="center">4XX</td><td align="center">Client Error</td><td align="center">服务器无法处理请求</td></tr><tr><td align="center">5XX</td><td align="center">Server Error</td><td align="center">服务处理请求出错</td></tr></tbody></table><ul><li><code>204 No Content</code> 请求处理成功，但没有资源可返回</li><li><code>206 Partial Content</code> 范围请求处理成功</li><li><code>301 Moved Permanently</code> 永久性重定向</li><li><code>302 Found</code> 临时性重定向</li><li><code>304 Not Modified</code> 未满足_附带条件的请求_（GET 方法请求报文中包含 If-Match&#x2F;If-Modified-Since&#x2F;If-None-Math&#x2F;If-Range&#x2F;If-Unmodified-Since）；服务器资源未改变，可直接使用客户端未过期的缓存</li><li><code>400 Bad Request</code> 请求报文语法错误</li><li><code>401 Unauthorized</code> 请求需要通过某些认证</li><li><code>403 Forbidden</code> 请求不允许访问</li><li>500 Internal Server Error 服务器故障</li><li><code>503 Service Unavailable</code> 服务器超负载或者停机维护</li></ul><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><ul><li>利用 <em>虚拟主机</em> 可以在一台服务器上搭建多个Web站点，发送HTTP请求时Host首部需指定域名的URI</li><li>一些用于通信数据的转发程序配合服务器工作：<strong>代理、网关、隧道</strong></li><li>代理服务和客户端本地磁盘都可以保存资源副本用以缓存</li></ul><blockquote><p>使用<strong>代理</strong>的目的：</p><ol><li>利用缓存技术减少网络带宽的流量</li><li>针对一些网站做访问控制，从而获取访问日志等信息</li></ol><p><strong>网关</strong>能使通信线路上的服务器提供非HTTP协议服务</p><p><strong>隧道</strong>可按要求建立与其他服务器的通信线路，使用SSL等加密手段进行通信</p><p><strong>如何判断缓存是否有效？</strong></p></blockquote><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h3><ul><li>cache-control<ul><li>no-cache —— 不缓存过期的资源，缓存会向源服务器确认有效期后处理资源</li><li>no-store —— 不使用缓存</li></ul></li><li>connection<ul><li>[不再转发的首部字段名] —— 可控制不再转发的首部字段名</li><li>Keep-Alive —— 持久连接，HTTP&#x2F;1.1 默认值</li><li>close —— 服务器端明确想断开连接</li></ul></li></ul><h3 id="请求时的首部字段"><a href="#请求时的首部字段" class="headerlink" title="请求时的首部字段"></a>请求时的首部字段</h3><ul><li><p>referer 原始请求URI。客户端一般会带上这个字段请求服务器，但是当在浏览器地址栏直接访问时，出于安全考虑会省略</p></li><li><p>对请求内容的一些补充</p><ul><li>accept 支持的媒体类型 （text&#x2F;html，application&#x2F;json）</li><li>accept-charset 支持的字符集 （unicode-1-1）</li><li>accept-encoding 支持的内容编码 （gzip）</li><li>accept-language 支持的自然语言集 （zh-cn）</li></ul></li><li><p>附带条件的请求</p><table><thead><tr><th align="center">携带字段</th><th align="center">满足条件的返回</th><th align="center">不满足条件的返回</th></tr></thead><tbody><tr><td align="center">if-match(<code>ETag</code>)</td><td align="center">200</td><td align="center">412</td></tr><tr><td align="center">if-modified-since</td><td align="center">200</td><td align="center">304</td></tr><tr><td align="center">if-range(<code>ETag</code>)</td><td align="center">206</td><td align="center">200</td></tr></tbody></table></li></ul><h3 id="响应时的首部字段"><a href="#响应时的首部字段" class="headerlink" title="响应时的首部字段"></a>响应时的首部字段</h3><ul><li><code>ETag</code>值是资源被缓存时分配的身份标识，其生成算法没有统一规则，仅与服务器有关</li><li>expires 未过期的情况下<ul><li>浏览器将直接从缓存中读取，不会发送http请求</li><li>缓存服务器将返回缓存，不请求源服务器</li></ul></li><li>last-modified 浏览器发送下一次请求相同资源时，会带上 if-modified-since 的 request header</li><li>location 几乎所有的浏览器在接收到带有location的响应后，都会强制性的跳转访问</li><li>vary 源服务器对代理服务器缓存的使用进行控制，如 <code>Vary: Accept-Encoding</code> 第一次请求accept-encoding &#x3D;gzip，第二次如果也是 gzip 请求则使用代理服务器缓存</li><li>对返回内容的一些补充<ul><li>content-type（text&#x2F;html，application&#x2F;json）</li><li>content-language</li><li>content-length</li></ul></li><li>content-encoding 告知客户端资源返回的编码格式</li></ul><h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><h3 id="HTTP的安全问题"><a href="#HTTP的安全问题" class="headerlink" title="HTTP的安全问题"></a>HTTP的安全问题</h3><ul><li>不验证通信方的身份，可能遭遇伪装</li><li>通信使用明文，内容可能被窃听<ul><li>通过 wireshark 等抓包工具可以查看到明文信息</li></ul></li></ul><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>HTTPS 就是 HTTP 和 TCP 之间加入了 SSL 协议，HTTP 先和 SSL 通信，SSL 再和 TCP 通信</p><p>SSL 协议：在应用层和传输层之间对连接进行加密的通信协议</p><ul><li>SSL 协议 1.0 和 2.0 版本存在问题已经废弃，目前 TLS协议 均以 SSL 3.0 为基准制定</li></ul><p>HTTPS的安全通信机制：</p><ol><li>客户端发起 SSL 通信请求<ul><li>客户端也有客户端证书，比如网银会要求客户端安装证书才能登录访问，但是客户端证书只能证明客户端存在，不能证明用户的真实有效 性，有些鸡肋</li></ul></li><li>服务端返回证书和公钥</li><li>客户端根据内置的证书公钥验证证书合法性 —— 解决无法验证通信方身份的问题<ul><li>浏览器发行商会预设一些权威证书机构的证书公钥</li></ul></li><li>客户端生成 pre-master-secret，通过服务器公钥加密后发送给服务器</li><li>服务器接收并通过私钥解密，获取 pre_master_secret</li><li>客户端和服务器生成 pre_master_secret -&gt; master_secret -&gt; 一些密钥（共享密钥）</li><li>双方通过 HTTP 传输用共享密钥加密的信息 —— 解决通信使用明文的问题</li></ol><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><p>HTTP 协议标准提供的 BASIC 认证和 DIGEST 认证，由于使用上的便利性和安全性，导致几乎不怎么使用</p><p>SSL 客户端认证虽然具有高度的安全等级，但是导入操作以及证书维持费用等问题，也没怎么使用</p><p>因为HTTP时无状态协议，目前 Web 登录认证多半基于表单认证：</p><ol><li>客户端发送 身份ID 和 登录密码<ul><li><p>如何保存登录密码等信息并没有标准化</p><blockquote><p>一种安全的保存方法，给密码附加额外信息（加盐），再使用散列函数求出散列值后保存，这样能增加攻击者利用密码特征库破解的难度</p></blockquote></li></ul></li><li>服务器响应头返回 Set-Cookie</li><li>客户端请求头携带 Cookie 进行后续的用户操作，从而维持登录状态</li></ol><h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h2><h3 id="HTTP协议导致的性能瓶颈"><a href="#HTTP协议导致的性能瓶颈" class="headerlink" title="HTTP协议导致的性能瓶颈"></a>HTTP协议导致的性能瓶颈</h3><ul><li>一条连接只能发送一个请求</li><li>请求只能从客户端开始</li><li>请求&#x2F;响应首部信息不会压缩</li><li>每次互相发送相同的首部信息造成浪费</li><li>数据发送非强制压缩</li></ul><h3 id="基于HTTP追加的协议"><a href="#基于HTTP追加的协议" class="headerlink" title="基于HTTP追加的协议"></a>基于HTTP追加的协议</h3><ul><li>HTTP &#x2F; 2.0<ul><li><p>多路复用流，通过单一的 TCP 连接，可以同时无限制地处理多个HTTP 请求</p><blockquote><p>多路复用代替了 HTTP1.x 的序列和阻塞机制，所有的<strong>相同域名</strong>请求都通过同一个TCP连接并发完成。</p><p>在 HTTP1.x 中，并发 N 个请求需要 N 个TCP连接，浏览器为了控制资源会有6-8个TCP连接都限制。</p></blockquote></li><li><p>赋予请求优先级</p></li><li><p>压缩 HTTP 首部</p></li><li><p>推送功能，服务器可以主动向客户端推送数据</p></li></ul></li><li>WebSocket：实现 WebSocket 通信，在 HTTP 连接建立后，需要完成一次握手。因为基于 HTTP，所以 WebSocket 请求由客户端发起，成功握手确认连接后，通信时使用的不再是 HTTP 的数据帧，而是 WebSocket 独立的数据帧。<ul><li>推送功能</li><li>减少通信量，WebSocket 的首部信息很小</li></ul></li></ul><h2 id="第十章-第十一章-构建-Web-内容的技术-Web-的攻击技术"><a href="#第十章-第十一章-构建-Web-内容的技术-Web-的攻击技术" class="headerlink" title="第十章 &#x2F; 第十一章 构建 Web 内容的技术 &#x2F; Web 的攻击技术"></a>第十章 &#x2F; 第十一章 构建 Web 内容的技术 &#x2F; Web 的攻击技术</h2><p>两个章节简单介绍了一些常用的 Web 应用开发技术和攻击手段，略读</p>]]></content>
    
    
    <summary type="html">网络基础</summary>
    
    
    
    <category term="学习笔记" scheme="https://zo-ly.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTTP" scheme="https://zo-ly.github.io/blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程入门经典</title>
    <link href="https://zo-ly.github.io/blog/2020/08/10/beginning-functional-javascript/"/>
    <id>https://zo-ly.github.io/blog/2020/08/10/beginning-functional-javascript/</id>
    <published>2020-08-10T02:33:48.000Z</published>
    <updated>2025-10-30T08:35:00.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-函数式编程简介"><a href="#第一章-函数式编程简介" class="headerlink" title="第一章 函数式编程简介"></a>第一章 函数式编程简介</h2><h3 id="一些编程范式"><a href="#一些编程范式" class="headerlink" title="一些编程范式"></a>一些编程范式</h3><p><em>命令式编程范式</em>(imperative)): 让机器按照规定的命令执行下去，即一步一步告诉计算机先做什么在做什么</p><p><em>声明式编程</em>(declarative)：是以数据结构的形式来表达程序执行的逻辑。它的主要思想是告诉计算机应该做什么，但不指定具体要怎么做。</p><p><em>函数式编程</em>(functional)最重要的特点是“函数第一位”，即函数可以出现在任何地方，把函数作为参数传递给另一个函数，不仅如此你还可以将函数作为返回值。</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>创建仅依赖输入就可以完成自身逻辑的函数</p><p>函数式编程和声明式编程是有所关联的，因为他们思想是一致的：即只关注做什么而不是怎么做。但函数式编程不仅仅局限于声明式编程。</p><span id="more"></span><ul><li>函数式编程的好处<ul><li>大多说函数式编程的好处来自于纯函数</li></ul></li><li>纯函数<ul><li>给定输入返回相同输出，不改变外部环境</li></ul></li><li>纯函数的好处<ol><li>可测试</li><li>可读性高</li><li>可缓存</li><li>不用担心代码并发执行</li></ol></li><li>JavaScript更像一种多范式语言，但是非常适合函数式编程范式</li></ul><h2 id="第二章-JavaScript函数基础"><a href="#第二章-JavaScript函数基础" class="headerlink" title="第二章 JavaScript函数基础"></a>第二章 JavaScript函数基础</h2><ul><li>使用箭头函数代码要简洁得多</li><li><code>var</code> 在函数内不管在哪个块，总是全局的定义变量</li><li><code>babel</code> <code>bael-cli</code> <code>bael-node</code> 的配置和使用</li></ul><h2 id="第三章-高阶函数"><a href="#第三章-高阶函数" class="headerlink" title="第三章 高阶函数"></a>第三章 高阶函数</h2><h3 id="一等公民"><a href="#一等公民" class="headerlink" title="一等公民"></a>一等公民</h3><p>当一门语言允许函数作为任何其他数据类型使用时，函数被称为这门语言的一等公民</p><blockquote><p>在编程语言中，一等公民可以作为函数参数，可以作为函数返回值，也可以赋值给变量。<br>In general, a value in a programming language is said to have ﬁrst-class status if it can be passed as a parameter, returned from a subroutine, or assigned into a variable.<br>–《<a href="https://www.cs.rochester.edu/~scott/pragmatics/">Programming Language Pragmatics</a>》</p><p>函数作为一等公民是函数式编程的必要条件，高阶函数(higher-order functions)，就是使用函数作为参数的函数，它在函数式编程中很常见<br>First-class functions are a necessity for the functional programming style, in which the use of higher-order functions is a standard practice.<br>–<a href="https://en.wikipedia.org/wiki/First-class_function">wikipedia</a></p></blockquote><p>高阶函数式是接受函数作为参数 <em>并且</em> | <em>或者</em> 返回函数作为输出的函数</p><ul><li>高阶函数就是定义抽象</li><li>抽象让我们专注于预定的目标而无须关心底层的系统概念</li><li>大多数高阶函数都会与闭包一起使用</li></ul><h2 id="第四章-闭包与高阶函数"><a href="#第四章-闭包与高阶函数" class="headerlink" title="第四章 闭包与高阶函数"></a>第四章 闭包与高阶函数</h2><p>为什么叫 “闭包（Closure）”</p><blockquote><p>a function which <strong>closes over</strong> the <strong>environment(scope)</strong> in which it was defined<br>在一个封<strong>闭</strong>的此法作用域中，将某些自由变量<strong>包</strong>在定义它的函数中</p></blockquote><ul><li>闭包就是一个<strong>内部函数</strong>（另一个函数内部的函数），有三个可访问的作用域 1. 自身声明的 2. 全局变量的 3. <strong>外部函数的</strong></li><li>闭包的缺点，常驻内存，内存消耗对脚本性能产生负面影响</li></ul><h2 id="第五章-数组的函数式编程"><a href="#第五章-数组的函数式编程" class="headerlink" title="第五章 数组的函数式编程"></a>第五章 数组的函数式编程</h2><ul><li>把函数应用于一个值并创建一个新值的过程称为投影（不改变自身而产生新值）</li><li>设置累加器并遍历数组以生成一个单一元素的过程称为归约数组，重复该过程称为归约操作</li><li>投影函数 <code>map</code> <code>filter</code> <code>concat</code> <code>reduce</code> <code>zip</code>，让使用数组变得简单，理解这些函数的运行机制有助于对函数式有更加深入的思考</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">map</span> = (<span class="params">array, fn</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> results = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    results.<span class="title function_">push</span>(<span class="title function_">fn</span>(value));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">filter</span> = (<span class="params">array, fn</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> results = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="title function_">fn</span>(value) &amp;&amp; results.<span class="title function_">push</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">concatAll</span> = (<span class="params">array</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> results = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    results.<span class="property">push</span>.<span class="title function_">apply</span>(results, <span class="title class_">Array</span>.<span class="title function_">isArray</span>(value) ? value : [value]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reduce</span> = (<span class="params">array, fn, initValue</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> acc = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (initValue !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    acc = initValue;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">      acc = <span class="title function_">fn</span>(acc, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i &lt; array.<span class="property">length</span>;i++) &#123;</span><br><span class="line">      acc = <span class="title function_">fn</span>(acc, array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">zip</span> = (<span class="params">leftArr, rightArr, fn</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> results = [];</span><br><span class="line">  <span class="keyword">const</span> maxLen = <span class="title class_">Math</span>.<span class="title function_">min</span>(leftArr.<span class="property">length</span>, rightArr.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; maxLen;i++) &#123;</span><br><span class="line">    results.<span class="title function_">push</span>(<span class="title function_">fn</span>(leftArr[i], rightArr[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayUtils = &#123;</span><br><span class="line">  map,</span><br><span class="line">  zip,</span><br><span class="line">  filter,</span><br><span class="line">  reduce,</span><br><span class="line">  concatAll</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="第六章-柯里化与偏应用"><a href="#第六章-柯里化与偏应用" class="headerlink" title="第六章 柯里化与偏应用"></a>第六章 柯里化与偏应用</h2><ul><li>柯里化就是把一个多参数函数转换为一个嵌套的一元函数的过程<ul><li>只接受一个参数的函数称为一元函数，接受两个参数的函数称为二元函数，接受n个参数的函数称为n元函数</li><li>接受可变数量的参数称为变参函数，通过<code>arguments</code>可捕获该函数的额外参数</li><li>es6的扩展运算符，更简洁、更清晰的表示一个函数接受可变的参数</li></ul></li><li>柯里化函数有助于移除很多函数中的样板代码（boilerplate code，几乎不变的、重复的代码）</li></ul><p><code>arguments</code> 是一个类数组对象，是所有（非箭头）函数中都可用的局部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类数组对象</span></span><br><span class="line"><span class="keyword">var</span> my_object = &#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;zero&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;one&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;two&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;three&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;four&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">5</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Array.prototype.slice.call(arguments)</code> 将 <code>arguments</code> 转换为一个真正的数组 <a href="https://stackoverflow.com/questions/7056925/how-does-array-prototype-slice-call-work">参考</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">curry</span> = (<span class="params">fn</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;no function provided&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &lt; fn.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="literal">null</span>, args.<span class="title function_">concat</span>([].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)));</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fn</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>偏函数的应用称为偏应用</li><li>柯里化和偏函数都是将多参函数转换为接受更少参数函数的方法，区别在于<ul><li>柯里化是将函数转换为多个嵌套的一元函数</li><li>偏函数可以接受不只一个参数，它被固定了部分参数作为预设，并可以接受剩余的参数</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">partial</span> = (<span class="params">fn, ...partialArgs</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">extraArg</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> args = [].<span class="title function_">concat</span>(partialArgs);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; args.<span class="property">length</span>;i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (args[i] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        args[i] = extraArg;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="literal">null</span>, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们需要 <code>curry</code> 或者 <code>partial</code>, 但并不是同时需要</li><li>柯里化和偏应用一直是函数式编程的工具，该用 <code>curry</code> 还是 <code>partial</code> 应该视情况而定，取决于具体场景</li></ul><h2 id="第七章-组合与管道"><a href="#第七章-组合与管道" class="headerlink" title="第七章 组合与管道"></a>第七章 组合与管道</h2><p>Unix的一些理念</p><ul><li>每个程序只做好一件事情</li><li>重新构建要好于在复杂的旧程序中添加“新属性”</li><li>每个程序的输出应该是另外一个尚未可知的程序的输入</li></ul><p>组合与管道</p><ul><li>无需创建新的函数就可以通过基础函数解决问题</li><li>小函数 组合为 大函数，简单的函数容易阅读、测试和维护</li><li>组合与管道做相同的事情，只是数据流方向不同而已</li><li>从左至右处理数据流的过程称为管道（pipeline）或序列（sequence）</li></ul><p>小巧的 <code>compose</code> 或 <code>pipe</code> 用处很大，能够让开发者通过定义良好的小函数按需组合成复杂的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">...fns</span>) =&gt;</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> fns.<span class="title function_">reverse</span>().<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, current</span>) =&gt;</span> <span class="title function_">current</span>(pre), value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pipe</span> = (<span class="params">...fns</span>) =&gt;</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> fns.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, current</span>) =&gt;</span> <span class="title function_">current</span>(pre), value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">identity</span> = (<span class="params">it</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[debug]&#x27;</span>, it);</span><br><span class="line">  <span class="keyword">return</span> it;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第八章-函子-Functor"><a href="#第八章-函子-Functor" class="headerlink" title="第八章 函子(Functor)"></a>第八章 函子(Functor)</h2><p>用一种纯函数式的方式帮助我们处理错误</p><p>函子是一个实现了map契约的对象，在遍历每个对象值得时候生成一个新的对象</p><ul><li>函子是一个持有值的容器</li><li>函子实现了map方法（单纯的持有值是几乎没有应用场景的）</li><li>Pointed函子是一个函子的子集，它具有实现了<code>of</code>契约的接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Container</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Container</span>.<span class="property">of</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Container</span>(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Container</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Container</span>.<span class="title function_">of</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">value</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现map函数的方式提供了不同类型的函子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  MayBe函子</span></span><br><span class="line"><span class="comment">  1. 避免麻烦的 null 或 undefined 检查</span></span><br><span class="line"><span class="comment">  2. 所有map函数都会被调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MayBe</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MayBe</span>.<span class="property">of</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MayBe</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MayBe</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isNothing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MayBe</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">isNothing</span>() ? <span class="title class_">MayBe</span>.<span class="title function_">of</span>(<span class="literal">null</span>) : <span class="title class_">MayBe</span>.<span class="title function_">of</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">value</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">splitStr</span> = (<span class="params">str</span>) =&gt; str.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="title class_">MayBe</span>.<span class="title function_">of</span>(<span class="literal">null</span>).<span class="title function_">map</span>(splitStr).<span class="title function_">map</span>(splitStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Either函子</span></span><br><span class="line"><span class="comment">  确定报错原因，以便分析问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Nothing</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Nothing</span>.<span class="property">of</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Nothing</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Nothing</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Some</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Some</span>.<span class="property">of</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Some</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Some</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Some</span>.<span class="title function_">of</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">value</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Either</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title class_">Either</span> = <span class="title class_">Some</span>.<span class="title function_">of</span>(<span class="comment">/*sth.*/</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="title class_">Either</span> = <span class="title class_">Nothing</span>.<span class="title function_">of</span>(<span class="comment">/*err msg*/</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Either</span>.<span class="title function_">map</span>(<span class="comment">/*do sth.*/</span>).<span class="title function_">map</span>(<span class="comment">/*do sth.*/</span>)</span><br></pre></td></tr></table></figure><h2 id="第九章-深入理解-Monad"><a href="#第九章-深入理解-Monad" class="headerlink" title="第九章 深入理解 Monad"></a>第九章 深入理解 Monad</h2><p>Monad有助于扁平化 <code>MayBe</code>数据</p><ul><li>Monad就是一个含有 <code>chain</code> 方法的函子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MayBe</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">join</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">isNothing</span>() ? <span class="title class_">MayBe</span>.<span class="title function_">of</span>(<span class="literal">null</span>) : <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MayBe</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">chain</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">map</span>(fn).<span class="title function_">join</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Monad和函子(Functor)是函数式领域的概念，如果需要深入理解，可研读《<a href="https://book.douban.com/subject/26772149/">Scala函数式编程</a>》</p><h2 id="第十章-使用-Generator"><a href="#第十章-使用-Generator" class="headerlink" title="第十章 使用 Generator"></a>第十章 使用 Generator</h2><p>书中使用 Generator 主要是用来解决 JavaScript 中的异步回调问题</p><ul><li>同步：函数在执行时会阻塞调用者，并在执行完毕后返回结果</li><li>异步：函数在执行时不会阻塞调用者，一旦执行完毕就会返回结果</li><li>惰性求值：代码直到调用时才会执行</li><li>Generator 是 ES6 规范的一部分，被捆绑在语言层面<ul><li>不能无限制地调用 <code>next</code> 从 Generator 中取值，Generator 如同序列，一旦序列中的值被消费，就不能再次消费它</li><li><code>yield</code> 使 Generator 函数暂停了执行并将结果返回给调用者</li><li><code>done</code> 是一个判断 Generator 序列是否已被完全消费的属性</li></ul></li></ul>]]></content>
    
    
    <summary type="html">一些摘要，方便回顾</summary>
    
    
    
    <category term="学习笔记" scheme="https://zo-ly.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="函数式编程" scheme="https://zo-ly.github.io/blog/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    <category term="JavaScript" scheme="https://zo-ly.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于CSS的常用布局</title>
    <link href="https://zo-ly.github.io/blog/2017/10/30/about-layout/"/>
    <id>https://zo-ly.github.io/blog/2017/10/30/about-layout/</id>
    <published>2017-10-30T12:56:48.000Z</published>
    <updated>2025-10-30T08:35:00.836Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>放一篇以前关于双飞翼布局、圣杯布局总结吧，感觉博客太空了…（⊙＿⊙；）…</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>双飞翼布局和圣杯布局都是页面设计常用的布局</p><p>关于双飞翼布局和圣杯布局，先看两个布局的DOM文档</p><span id="more"></span><h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><p>双飞翼布局左右附注栏没有和内容包在同一个容器里，用双飞翼来形容确实很形象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>双飞翼<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着来看css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.middle</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">210px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">500px</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.left</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">      <span class="attribute">background-color</span>: coral;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">      <span class="attribute">background-color</span>: tomato;</span><br><span class="line">      <span class="attribute">margin-left</span>:-<span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="/blog/images/pictures/shuangfeiyi.PNG" alt="shuangfeiyi"></p><h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><p>而圣杯布局就是左右附注栏和内容同时包在同一个容器里</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>圣杯<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着来看css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">        <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">210px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.middle</span>&#123;</span><br><span class="line">        <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">background-color</span>:<span class="number">#eee</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.left</span>&#123;</span><br><span class="line">        <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>:coral;</span><br><span class="line">        <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">position</span>:relative;</span><br><span class="line">        <span class="attribute">left</span>:-<span class="number">210px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.right</span>&#123;</span><br><span class="line">        <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>:tomato;</span><br><span class="line">        <span class="attribute">margin-left</span>:-<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">position</span>:relative;</span><br><span class="line">        <span class="attribute">right</span>:-<span class="number">210px</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="/blog/images/pictures/shengbei.PNG" alt="shengbei"></p><ul><li>关于负margin</li></ul><p><code>margin-top/left</code>为负值不会增加高度, 只会产生向上位移&#x2F;左移, <code>margin-bottom/right</code>为负数, 元素并不会向下&#x2F;右移动, 而是将后续的元素拖拉进来, 覆盖本来的元素。<br>两个布局都用float脱离文档流，用负margin调整附注栏位置。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>css中的负边距(negative margin)是布局中的一个常用技巧，非常基础，只要运用得合理常常会有意想不到的效果。很多特殊的css布局方法都依赖于负边距，所以掌握它的用法对于前端的同学来说，那是必须的。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;放一篇以前关于双飞翼布局、圣杯布局总结吧，感觉博客太空了…（⊙＿⊙；）…&lt;/p&gt;
&lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h3&gt;&lt;p&gt;双飞翼布局和圣杯布局都是页面设计常用的布局&lt;/p&gt;
&lt;p&gt;关于双飞翼布局和圣杯布局，先看两个布局的DOM文档&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://zo-ly.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CSS" scheme="https://zo-ly.github.io/blog/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>hexo主题的更换及修改</title>
    <link href="https://zo-ly.github.io/blog/2016/12/11/change/"/>
    <id>https://zo-ly.github.io/blog/2016/12/11/change/</id>
    <published>2016-12-11T12:39:44.000Z</published>
    <updated>2025-10-30T08:35:00.836Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/pictures/background.png" alt="background-image"></p><hr><p>next主题是我最先选择的主题，在使用期间也修改了几个地方，但是由于感觉背景色太亮，看久了眼睛不舒服，自己调背景色之后又感觉很不搭，所以最后还是换了yilia主题</p><h3 id="关于next主题"><a href="#关于next主题" class="headerlink" title="关于next主题"></a>关于next主题</h3><p><a href="https://github.com/iissnan/hexo-theme-next">NEXT主题</a><br>在使用next主题期间，我尝试更改了几个自己不太满意的地方</p><span id="more"></span><h6 id="1、博客页脚爱心logo的更换，以及文字的更改"><a href="#1、博客页脚爱心logo的更换，以及文字的更改" class="headerlink" title="1、博客页脚爱心logo的更换，以及文字的更改"></a>1、博客页脚爱心logo的更换，以及文字的更改</h6><p>主题原来的样式如下：</p><p><img src="/blog/images/pictures/p1.jpg" alt="em1"></p><p>如果想要更改爱心logo，可以在<code>themes/next/layout/_partials/footer.swig</code>中找到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;with-love&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">//改为下面这样</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;with-love&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-send-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你想更改为其他的图标，可以在<a href="http://www.yeahzan.com/fa/facss.html">font awesome</a>找到</p><p>如果想更改页脚文字，可以在<code>themes/next/languages/zh-Hans.yml</code>中,更改文字显示</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="string">&quot;powered by  %s &quot;</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">theme</span></span><br></pre></td></tr></table></figure><p>更改以后效果是这样的</p><p><img src="/blog/images/pictures/p2.jpg" alt="em2"></p><h6 id="2、每篇博客之间分割线的长度的更改"><a href="#2、每篇博客之间分割线的长度的更改" class="headerlink" title="2、每篇博客之间分割线的长度的更改"></a>2、每篇博客之间分割线的长度的更改</h6><p>主题原分割线的长度如下：</p><p><img src="/blog/images/pictures/p3.jpg" alt="em3"></p><p>在<code>themes/next/source/css/_common/components/post/post-eof.styl</code>里更改如下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-eof</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: $post-eof-margin-top auto $post-eof-margin-bottom;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;//此处控制分割线长度</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">background</span>: $grey-light;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>更改以后的效果是这样的</p><p><img src="/blog/images/pictures/p4.jpg" alt="em4"></p><h6 id="3、为博客添加留言功能"><a href="#3、为博客添加留言功能" class="headerlink" title="3、为博客添加留言功能"></a>3、为博客添加留言功能</h6><p>这个留言功能其实很好实现，在主站点<br>右键gitbash输入<code>hexo n page guestbook</code>即可在<code>source</code>目录下创建<code>guestbook</code>文件夹，里面会生成一个index.md文件，即可根据自己喜好编辑</p><h6 id="4、访问博客加载速度慢"><a href="#4、访问博客加载速度慢" class="headerlink" title="4、访问博客加载速度慢"></a>4、访问博客加载速度慢</h6><p>访问使用next主题的博客时，感觉博客的加载速度偏慢（<del>难道是百度统计的锅？</del>），应该是加载谷歌字体的锅，解决方法：<code>themes/next/layout/_partials/head/external-fonts.swig/</code>文件里的<code>fonts.google.com</code>改成<code>fonts.useso.com</code></p><h3 id="关于yilia主题"><a href="#关于yilia主题" class="headerlink" title="关于yilia主题"></a>关于yilia主题</h3><p><a href="https://github.com/litten/hexo-theme-yilia">yilia主题</a><br>移动端的体验很好，配色看着很舒服，所以我最后选择了这个主题,配置过程中遇到了几个问题，列出来希望遇到相同情况的同学可以避免</p><h6 id="1、头像不显示的问题"><a href="#1、头像不显示的问题" class="headerlink" title="1、头像不显示的问题"></a>1、头像不显示的问题</h6><p>直接把<code>layout/_partial/left-col.ejs</code>里的代码修改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;&lt;%=theme.avatar%&gt;&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;js-avatar show&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%=theme.avatar%&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;js-avatar show&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 100%;opacity: 1;&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>还有在<code>hexo g</code>的时候gitbash是会报错的，其实<code>hexo g</code>之后可以粗略看一下信息，如果是_config.yml里的语法错误，可以及时更改，这样会节省不少时间的（配置头像时我就出现了语法错误，耽搁了不少时间T_T）</p><h6 id="2、给左边栏头像后面添加背景图片"><a href="#2、给左边栏头像后面添加背景图片" class="headerlink" title="2、给左边栏头像后面添加背景图片"></a>2、给左边栏头像后面添加背景图片</h6><p>在<code>yilia/source/main.css</code>中可以进行相关设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left-col</span> <span class="selector-class">.overlay</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">/blog/images/bg.jpg</span>);//背景图片放在站点source/images目录下就行</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>//这里可以设置背景的透明度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改的时候我发现，main.css里面的代码是写在一行上的（这样做的原因应该是为了加快网页的加载速度），非常难以也读和修改，不过网上有很多在线格式化代码的工具，把代码复制粘贴过去就好了</p><h6 id="3、添加腾讯404页面"><a href="#3、添加腾讯404页面" class="headerlink" title="3、添加腾讯404页面"></a>3、添加腾讯404页面</h6><p>为博客添加一个风格更符合的公益404页面，代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>404 - Zcc&#x27;s blog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;404错误，页面不存在！&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="待解决的问题"><a href="#待解决的问题" class="headerlink" title="待解决的问题"></a>待解决的问题</h3><p>在更换博客主题后，我发现虽然还是可以使用多说评论，但是我之前的多说评论都不见了，而且多说评论数与实际显示评论数不符，查了不少但始终没找到解决方法。<br>不过这个问题对我来说影响不大，那就不理它了ヽ(ー_ー )ノ</p><p>2016-12-13日更新：<br>更换主题之后多说评论数不同，是因为next主题和yilia主题所生成的data-thread-key不同，只要在<code>yilia/source/layout/_partial/post/duoshuo.ejs</code>中把<code>data-thread-key=&quot;&lt;%=key%&gt;&quot;</code>改成<code>data-thread-key=&quot;&lt;%=page.path%&gt;&quot;</code>即可</p><p>自己折腾了这些之后，对谷歌开发者工具（Chrome Inspector）熟悉了不少，阅读了很多优秀博主的博客网页代码，感觉自己要学的还挺多，努力看书吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/pictures/background.png&quot; alt=&quot;background-image&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;next主题是我最先选择的主题，在使用期间也修改了几个地方，但是由于感觉背景色太亮，看久了眼睛不舒服，自己调背景色之后又感觉很不搭，所以最后还是换了yilia主题&lt;/p&gt;
&lt;h3 id=&quot;关于next主题&quot;&gt;&lt;a href=&quot;#关于next主题&quot; class=&quot;headerlink&quot; title=&quot;关于next主题&quot;&gt;&lt;/a&gt;关于next主题&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;NEXT主题&lt;/a&gt;&lt;br&gt;在使用next主题期间，我尝试更改了几个自己不太满意的地方&lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://zo-ly.github.io/blog/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://zo-ly.github.io/blog/tags/Hexo/"/>
    
    <category term="blog" scheme="https://zo-ly.github.io/blog/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Pages + Hexo 搭建个人博客</title>
    <link href="https://zo-ly.github.io/blog/2016/05/28/firstblog/"/>
    <id>https://zo-ly.github.io/blog/2016/05/28/firstblog/</id>
    <published>2016-05-28T16:50:27.000Z</published>
    <updated>2025-10-30T08:35:00.836Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一开始，我以为必须购买一个独立域名才可以进行博客的搭建（╯︿╰﹀ ，所以在狗爹上<strong>斥巨资</strong>(╯▔︵▔)╯ 购买了域名，后来在搭建过程中发现可以单纯利用Github pages就可以搭建自己的独立博客了T_T唉…..不过有个独立域名也挺好的。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>这几天因为看网易公开课<a href="http://open.163.com/movie/2010/9/J/J/M7S6PN5ED_M7S94TUJJ.html">构建动态网站</a>，萌生了自己搭建个独立博客的想法，搭建博客期间还是遇到了不少细节方面的问题，过程并没有想象中的那么简单。前辈们写的博客是个好东西，有不少的模板可以借鉴，但是呢还是遇到了一些坑，花了不少时间。搭建过程中发现自己和同为大学生的他们差距挺大的，还有不少要学，不过当看到自己的博客可以访问的时候心里还是挺激动的 ^o^&#x2F;。</p><span id="more"></span><h3 id="总结一下如何搭建个人博客"><a href="#总结一下如何搭建个人博客" class="headerlink" title="总结一下如何搭建个人博客"></a>总结一下如何搭建个人博客</h3><h4 id="如果要使用使用额外独立域名"><a href="#如果要使用使用额外独立域名" class="headerlink" title="如果要使用使用额外独立域名"></a>如果要使用使用额外独立域名</h4><ul><li>去go daddy购买，支持支付宝，而且网上有不少优惠码</li><li>购买成功后，更改godaddy的nameservers为DNSpod的nameservers，将nameservers更改为F1G1NS1.DNSPOD.NET和F1G1NS2.DNSPOD.NET</li><li>将独立域名与github pages的空间绑定，使用NDSpod，注册DNSpod，添加域名，其中两条A记录指向github pages提供的ip：·192.30.252.153和 ·192.30.252.154</li></ul><h4 id="单纯利用Github-pages搭建自己的独立博客"><a href="#单纯利用Github-pages搭建自己的独立博客" class="headerlink" title="单纯利用Github pages搭建自己的独立博客"></a>单纯利用Github pages搭建自己的独立博客</h4><ol><li>在GitHub创建个人仓库，命名为username.github.io（username是你的账号名）</li><li>安装Node.js和Git，Git是一个版本控制工具，而GitHub是类似于远程仓库，用于存放Git管理的各种项目</li><li>与Github建立联系，检查电脑中是否已有SSH keys，生成SSH keys，在Github中添加SSH key</li><li>安装Hexo（安装之前，应该已经安装了Git和Node.js）</li><li>使用Hexo建站，选择一个文件夹（如：E：\Hexo），此文件夹即日后的本地博客仓库。右键Git Bash，输入hexo init，此指令完成后，接着输入npm install，安装依赖包。这样本地Hexo博客就搭建好了，可以执行以下命令<code>hexo generate</code>（编译）、<code>hexo server -p 5000</code>（本地访问 在端口5000），在浏览器输入localhost:5000查看雏形。（注：此处可以输入<code>hexo server</code>在localhost:4000查看即可，但是我不知道我的端口什么原因，所以我只能在p 5000上查看）</li><li>将博客部署到Github上，在站点文件夹下右键git bash输入 <code>vim _config.yml</code>进行修改:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">     <span class="built_in">type</span>: git</span><br><span class="line">     repo: https://github.com/username/username.github.io.git</span><br><span class="line">     branch: master</span><br></pre></td></tr></table></figure><ol start="7"><li>为了能够使Hexo部署到Github上，需要安装一个插件，git bash输入<code>npm install hexo-deployer-git --save</code>，<br>然后再输入 <code>hexo g</code>（编译）、<code>hexo d</code>（提交到github）即可完成。在浏览器输入：username.github.io就可以进行浏览了，开心，吼吼</li><li>选择hexo主题，修改主题，我选择的是next主题，这个主题有很详细的<a href="http://theme-next.iissnan.com/">说明</a>，按照说明配置就行，这里说明一下，在配置侧边栏社交链接的图标是<a href="http://www.yeahzan.com/fa/facss.html">font awesome</a>（第一次知道有这种东西存在 (⊙﹏⊙)b），不必带 fa-前缀</li></ol><p><em>独立博客搭建完成</em></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>有了自己的博客，希望也能坚持学下去</p><p>嗯</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一开始，我以为必须购买一个独立域名才可以进行博客的搭建（╯︿╰﹀ ，所以在狗爹上&lt;strong&gt;斥巨资&lt;/strong&gt;(╯▔︵▔)╯ 购买了域名，后来在搭建过程中发现可以单纯利用Github pages就可以搭建自己的独立博客了T_T唉…..不过有个独立域名也挺好的。&lt;/p&gt;
&lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h3&gt;&lt;p&gt;这几天因为看网易公开课&lt;a href=&quot;http://open.163.com/movie/2010/9/J/J/M7S6PN5ED_M7S94TUJJ.html&quot;&gt;构建动态网站&lt;/a&gt;，萌生了自己搭建个独立博客的想法，搭建博客期间还是遇到了不少细节方面的问题，过程并没有想象中的那么简单。前辈们写的博客是个好东西，有不少的模板可以借鉴，但是呢还是遇到了一些坑，花了不少时间。搭建过程中发现自己和同为大学生的他们差距挺大的，还有不少要学，不过当看到自己的博客可以访问的时候心里还是挺激动的 ^o^&amp;#x2F;。&lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://zo-ly.github.io/blog/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://zo-ly.github.io/blog/tags/Hexo/"/>
    
    <category term="blog" scheme="https://zo-ly.github.io/blog/tags/blog/"/>
    
    <category term="GitHub Pages" scheme="https://zo-ly.github.io/blog/tags/GitHub-Pages/"/>
    
    <category term="静态独立博客" scheme="https://zo-ly.github.io/blog/tags/%E9%9D%99%E6%80%81%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
